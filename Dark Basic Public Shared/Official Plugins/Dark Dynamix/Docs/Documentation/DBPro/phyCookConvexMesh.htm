<HTML> 
	 <HEAD> 
		 <TITLE>PHY COOK CONVEX MESH</TITLE>
		<link rel="stylesheet" type="text/css" href="style1.css"/>
	</HEAD>

	<BODY id = "wrap">
		<span class="returns">bool</span>
		PHY COOK CONVEX MESH
		<span class="parameters">(int objectID, char* file)
		</span>
		<br><br>Cooks a convex mesh and saves it to file, 'cooking' is just a term which means it is converting the mesh to a format PhysX can use for fast collision detection. If the mesh you provide is not convex, a convex shape will be computed for you when possible, the number of polygons is limited to 256. You should cook all your meshes to file and then when your game/app needs them there is no need for the slow cooking process, if you do need to cook meshes on the fly then be sure to check the return value and deal with both possible outcomes accordingly. 
		<br><br>
		<span class="parameters">Parameters:
		</span>
		<br>objectID ID number of the object to create the mesh from.
		<br>file Name of the file you wish to create.
		<br>
		<br>
		<br>
		<span class="returns">Returns:
		</span>
		<br>TRUE if succeeded, FALSE otherwise.
		<br>

<br><br>
<center>
-------------------------------------------------------------------------------
</center>

		<span class="returns">bool</span>
		PHY COOK CONVEX MESH
		<span class="parameters">(int objectID, int convexMeshID)
		</span>
		<br><br>Cooks and then creates a convex mesh, 'cooking' is just a term which means it is converting the mesh to a format PhysX can use for fast collision detection. If the mesh you provide is not convex, a convex shape will be computed for you when possible, the number of polygons is limited to 256. You should try to avoid this function if possible and cook all your meshes to file and then when your game/app needs them there is no need for the slow cooking process, if you do need to cook meshes on the fly then be sure to check the return value and deal with both possible outcomes accordingly. 
		<br><br>
		<span class="parameters">Parameters:
		</span>
		<br>objectID ID number of the object to create the mesh from.
		<br>convexMeshID ID number of the convex mesh, you use this ID number when creating an actor from this convex mesh.
		<br>
		<br>
		<br>
		<span class="returns">Returns:
		</span>
		<br>TRUE if succeeded, FALSE otherwise.
		<br>

<br><br>
<center>
-------------------------------------------------------------------------------
</center>

		<span class="returns">bool</span>
		PHY COOK CONVEX MESH
		<span class="parameters">(int objectID, int limbID, int convexMeshID)
		</span>
		<br><br>Cooks and then creates a convex mesh, 'cooking' is just a term which means it is converting the mesh to a format PhysX can use for fast collision detection. If the mesh you provide is not convex, a convex shape will be computed for you when possible, the number of polygons is limited to 256. You should try to avoid this function if possible and cook all your meshes to file and then when your game/app needs them there is no need for the slow cooking process, if you do need to cook meshes on the fly then be sure to check the return value and deal with both possible outcomes accordingly. 
		<br><br>
		<span class="parameters">Parameters:
		</span>
		<br>objectID ID number of the owning object.
		<br>limbID ID number of the limb to create the mesh from.
		<br>file Name of the file you wish to create.
		<br>
		<br>
		<br>
		<span class="returns">Returns:
		</span>
		<br>TRUE if succeeded, FALSE otherwise.
		<br>

<br><br>
<center>
-------------------------------------------------------------------------------
</center>

		<span class="returns">bool</span>
		PHY COOK CONVEX MESH
		<span class="parameters">(int objectID, int limbID, char* file)
		</span>
		<br><br>Creates a convex mesh and saves it to file, 'cooking' is just a term which means it is converting the mesh to a format PhysX can use for fast collision detection. If the mesh you provide is not convex, a convex shape will be computed for you when possible, the number of polygons is limited to 256. You should cook all your meshes to file and then when your game/app needs them there is no need for the slow cooking process, if you do need to cook meshes on the fly then be sure to check the return value and deal with both possible outcomes accordingly. 
		<br><br>
		<span class="parameters">Parameters:
		</span>
		<br>objectID ID number of the owning object.
		<br>limbID ID number of the limb to create the mesh from.
		<br>file Name of the file you wish to create.
		<br>
		<br>
		<br>
		<span class="returns">Returns:
		</span>
		<br>TRUE if succeeded, FALSE otherwise.
		<br>
	</BODY>
</HTML>
		<br>
		<br>


